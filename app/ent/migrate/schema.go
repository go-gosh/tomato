// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CheckpointsColumns holds the columns for the "checkpoints" table.
	CheckpointsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "point", Type: field.TypeUint8},
		{Name: "content", Type: field.TypeString, Size: 64},
		{Name: "detail", Type: field.TypeString, Size: 255},
		{Name: "check_time", Type: field.TypeTime},
		{Name: "task_checkpoints", Type: field.TypeInt, Nullable: true},
	}
	// CheckpointsTable holds the schema information for the "checkpoints" table.
	CheckpointsTable = &schema.Table{
		Name:       "checkpoints",
		Columns:    CheckpointsColumns,
		PrimaryKey: []*schema.Column{CheckpointsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "checkpoints_tasks_checkpoints",
				Columns:    []*schema.Column{CheckpointsColumns[5]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TasksColumns holds the columns for the "tasks" table.
	TasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "title", Type: field.TypeString, Size: 32},
		{Name: "category", Type: field.TypeString, Size: 16},
		{Name: "star", Type: field.TypeInt8},
		{Name: "content", Type: field.TypeString, Size: 255},
		{Name: "join_time", Type: field.TypeTime},
		{Name: "start_time", Type: field.TypeTime, Nullable: true},
		{Name: "end_time", Type: field.TypeTime, Nullable: true},
		{Name: "deadline", Type: field.TypeTime, Nullable: true},
	}
	// TasksTable holds the schema information for the "tasks" table.
	TasksTable = &schema.Table{
		Name:       "tasks",
		Columns:    TasksColumns,
		PrimaryKey: []*schema.Column{TasksColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "username", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "password", Type: field.TypeString},
		{Name: "enabled", Type: field.TypeBool},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserConfigsColumns holds the columns for the "user_configs" table.
	UserConfigsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "rank", Type: field.TypeUint8},
		{Name: "working", Type: field.TypeUint},
		{Name: "break", Type: field.TypeUint},
		{Name: "user_id", Type: field.TypeInt},
	}
	// UserConfigsTable holds the schema information for the "user_configs" table.
	UserConfigsTable = &schema.Table{
		Name:       "user_configs",
		Columns:    UserConfigsColumns,
		PrimaryKey: []*schema.Column{UserConfigsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_configs_users_user_configs",
				Columns:    []*schema.Column{UserConfigsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "userconfig_user_id",
				Unique:  false,
				Columns: []*schema.Column{UserConfigsColumns[4]},
			},
		},
	}
	// UserTomatosColumns holds the columns for the "user_tomatos" table.
	UserTomatosColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "start_time", Type: field.TypeTime},
		{Name: "color", Type: field.TypeEnum, Enums: []string{"1", "2"}, SchemaType: map[string]string{"mysql": "tinyint", "sqlite3": "integer"}},
		{Name: "remain_time", Type: field.TypeTime},
		{Name: "end_time", Type: field.TypeTime, Nullable: true},
		{Name: "user_id", Type: field.TypeInt},
	}
	// UserTomatosTable holds the schema information for the "user_tomatos" table.
	UserTomatosTable = &schema.Table{
		Name:       "user_tomatos",
		Columns:    UserTomatosColumns,
		PrimaryKey: []*schema.Column{UserTomatosColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_tomatos_users_user_tomatoes",
				Columns:    []*schema.Column{UserTomatosColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "usertomato_user_id",
				Unique:  false,
				Columns: []*schema.Column{UserTomatosColumns[7]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CheckpointsTable,
		TasksTable,
		UsersTable,
		UserConfigsTable,
		UserTomatosTable,
	}
)

func init() {
	CheckpointsTable.ForeignKeys[0].RefTable = TasksTable
	UserConfigsTable.ForeignKeys[0].RefTable = UsersTable
	UserTomatosTable.ForeignKeys[0].RefTable = UsersTable
}
