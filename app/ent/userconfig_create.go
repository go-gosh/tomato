// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/go-gosh/tomato/app/ent/user"
	"github.com/go-gosh/tomato/app/ent/userconfig"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserConfigCreate is the builder for creating a UserConfig entity.
type UserConfigCreate struct {
	config
	mutation *UserConfigMutation
	hooks    []Hook
}

// SetRank sets the "rank" field.
func (ucc *UserConfigCreate) SetRank(u uint8) *UserConfigCreate {
	ucc.mutation.SetRank(u)
	return ucc
}

// SetWorking sets the "working" field.
func (ucc *UserConfigCreate) SetWorking(u uint8) *UserConfigCreate {
	ucc.mutation.SetWorking(u)
	return ucc
}

// SetBreak sets the "break" field.
func (ucc *UserConfigCreate) SetBreak(u uint8) *UserConfigCreate {
	ucc.mutation.SetBreak(u)
	return ucc
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (ucc *UserConfigCreate) SetUsersID(id int) *UserConfigCreate {
	ucc.mutation.SetUsersID(id)
	return ucc
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (ucc *UserConfigCreate) SetNillableUsersID(id *int) *UserConfigCreate {
	if id != nil {
		ucc = ucc.SetUsersID(*id)
	}
	return ucc
}

// SetUsers sets the "users" edge to the User entity.
func (ucc *UserConfigCreate) SetUsers(u *User) *UserConfigCreate {
	return ucc.SetUsersID(u.ID)
}

// Mutation returns the UserConfigMutation object of the builder.
func (ucc *UserConfigCreate) Mutation() *UserConfigMutation {
	return ucc.mutation
}

// Save creates the UserConfig in the database.
func (ucc *UserConfigCreate) Save(ctx context.Context) (*UserConfig, error) {
	var (
		err  error
		node *UserConfig
	)
	if len(ucc.hooks) == 0 {
		if err = ucc.check(); err != nil {
			return nil, err
		}
		node, err = ucc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ucc.check(); err != nil {
				return nil, err
			}
			ucc.mutation = mutation
			if node, err = ucc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ucc.hooks) - 1; i >= 0; i-- {
			if ucc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ucc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ucc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ucc *UserConfigCreate) SaveX(ctx context.Context) *UserConfig {
	v, err := ucc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucc *UserConfigCreate) Exec(ctx context.Context) error {
	_, err := ucc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucc *UserConfigCreate) ExecX(ctx context.Context) {
	if err := ucc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucc *UserConfigCreate) check() error {
	if _, ok := ucc.mutation.Rank(); !ok {
		return &ValidationError{Name: "rank", err: errors.New(`ent: missing required field "rank"`)}
	}
	if _, ok := ucc.mutation.Working(); !ok {
		return &ValidationError{Name: "working", err: errors.New(`ent: missing required field "working"`)}
	}
	if _, ok := ucc.mutation.Break(); !ok {
		return &ValidationError{Name: "break", err: errors.New(`ent: missing required field "break"`)}
	}
	return nil
}

func (ucc *UserConfigCreate) sqlSave(ctx context.Context) (*UserConfig, error) {
	_node, _spec := ucc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ucc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ucc *UserConfigCreate) createSpec() (*UserConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &UserConfig{config: ucc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userconfig.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userconfig.FieldID,
			},
		}
	)
	if value, ok := ucc.mutation.Rank(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: userconfig.FieldRank,
		})
		_node.Rank = value
	}
	if value, ok := ucc.mutation.Working(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: userconfig.FieldWorking,
		})
		_node.Working = value
	}
	if value, ok := ucc.mutation.Break(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: userconfig.FieldBreak,
		})
		_node.Break = value
	}
	if nodes := ucc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userconfig.UsersTable,
			Columns: []string{userconfig.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_user_configs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserConfigCreateBulk is the builder for creating many UserConfig entities in bulk.
type UserConfigCreateBulk struct {
	config
	builders []*UserConfigCreate
}

// Save creates the UserConfig entities in the database.
func (uccb *UserConfigCreateBulk) Save(ctx context.Context) ([]*UserConfig, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uccb.builders))
	nodes := make([]*UserConfig, len(uccb.builders))
	mutators := make([]Mutator, len(uccb.builders))
	for i := range uccb.builders {
		func(i int, root context.Context) {
			builder := uccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uccb *UserConfigCreateBulk) SaveX(ctx context.Context) []*UserConfig {
	v, err := uccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uccb *UserConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := uccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uccb *UserConfigCreateBulk) ExecX(ctx context.Context) {
	if err := uccb.Exec(ctx); err != nil {
		panic(err)
	}
}
