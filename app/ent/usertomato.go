// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/go-gosh/tomato/app/ent/user"
	"github.com/go-gosh/tomato/app/ent/usertomato"
)

// UserTomato is the model entity for the UserTomato schema.
type UserTomato struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// Color holds the value of the "color" field.
	Color usertomato.Color `json:"color,omitempty"`
	// RemainTime holds the value of the "remain_time" field.
	RemainTime time.Time `json:"remain_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime *time.Time `json:"end_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserTomatoQuery when eager-loading is set.
	Edges UserTomatoEdges `json:"edges"`
}

// UserTomatoEdges holds the relations/edges for other nodes in the graph.
type UserTomatoEdges struct {
	// Users holds the value of the users edge.
	Users *User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserTomatoEdges) UsersOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Users == nil {
			// The edge users was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserTomato) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case usertomato.FieldID, usertomato.FieldUserID:
			values[i] = new(sql.NullInt64)
		case usertomato.FieldColor:
			values[i] = new(sql.NullString)
		case usertomato.FieldCreatedAt, usertomato.FieldUpdatedAt, usertomato.FieldStartTime, usertomato.FieldRemainTime, usertomato.FieldEndTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserTomato", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserTomato fields.
func (ut *UserTomato) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usertomato.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ut.ID = int(value.Int64)
		case usertomato.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ut.CreatedAt = value.Time
			}
		case usertomato.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ut.UpdatedAt = value.Time
			}
		case usertomato.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ut.UserID = int(value.Int64)
			}
		case usertomato.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				ut.StartTime = value.Time
			}
		case usertomato.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				ut.Color = usertomato.Color(value.String)
			}
		case usertomato.FieldRemainTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field remain_time", values[i])
			} else if value.Valid {
				ut.RemainTime = value.Time
			}
		case usertomato.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				ut.EndTime = new(time.Time)
				*ut.EndTime = value.Time
			}
		}
	}
	return nil
}

// QueryUsers queries the "users" edge of the UserTomato entity.
func (ut *UserTomato) QueryUsers() *UserQuery {
	return (&UserTomatoClient{config: ut.config}).QueryUsers(ut)
}

// Update returns a builder for updating this UserTomato.
// Note that you need to call UserTomato.Unwrap() before calling this method if this UserTomato
// was returned from a transaction, and the transaction was committed or rolled back.
func (ut *UserTomato) Update() *UserTomatoUpdateOne {
	return (&UserTomatoClient{config: ut.config}).UpdateOne(ut)
}

// Unwrap unwraps the UserTomato entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ut *UserTomato) Unwrap() *UserTomato {
	tx, ok := ut.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserTomato is not a transactional entity")
	}
	ut.config.driver = tx.drv
	return ut
}

// String implements the fmt.Stringer.
func (ut *UserTomato) String() string {
	var builder strings.Builder
	builder.WriteString("UserTomato(")
	builder.WriteString(fmt.Sprintf("id=%v", ut.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ut.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ut.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", ut.UserID))
	builder.WriteString(", start_time=")
	builder.WriteString(ut.StartTime.Format(time.ANSIC))
	builder.WriteString(", color=")
	builder.WriteString(fmt.Sprintf("%v", ut.Color))
	builder.WriteString(", remain_time=")
	builder.WriteString(ut.RemainTime.Format(time.ANSIC))
	if v := ut.EndTime; v != nil {
		builder.WriteString(", end_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// UserTomatos is a parsable slice of UserTomato.
type UserTomatos []*UserTomato

func (ut UserTomatos) config(cfg config) {
	for _i := range ut {
		ut[_i].config = cfg
	}
}
